import java.util.*;

public class HybridSort 
{

    private static final int check_threshold=6;
    private static final int switcher_threshold=1000000;

    public static <T extends Comparable<T>> void JaiSort(T[] arr) 
    {
        T[] temp=Arrays.copyOf(arr,arr.length);
        T maxVal=Arrays.stream(arr).max(Comparable::compareTo).get();

        if(maxVal instanceof Long && ((Long) maxVal)>=switcher_threshold) 
        {
            radixSort(arr,temp,arr.length);
        } 
        else 
        {
            mergeSort(arr,temp,0,arr.length-1);
        }
    }

    private static <T extends Comparable<T>> void radixSort(T[] arr,T[] temp,int n) 
    {
        T maxVal=Arrays.stream(arr).max(Comparable::compareTo).get();

        for(long exp=1;((Long) maxVal)/exp>0;exp*=10) 
        {
            countSort(arr,temp,n,exp);
        }
    }

    private static <T extends Comparable<T>> void countSort(T[] arr,T[] temp,int n,long exp) 
    {

    int[] count=new int[19];
    for(int i=0;i<n;i++) 
    {
        count[(int) (convertToLong(arr[i],exp)%10+9)]++;
    }

    for(int i=1;i<19;i++) 
    {
        count[i]+=count[i - 1];
    }

    for(int i=n-1;i>=0;i--) 
    {
        temp[count[(int) (convertToLong(arr[i],exp)%10+9)]-1]=arr[i];
        count[(int) (convertToLong(arr[i],exp)%10+9)]--;
    }

    System.arraycopy(temp,0,arr,0,n);
}

    private static <T extends Comparable<T>> long convertToLong(T value,long exp) 
    {
        return (value instanceof Long) ? ((Long) value)/exp:((Integer)value)/exp;       // fix done jai time 11:37
    }


    private static <T extends Comparable<T>> void mergeSort(T[] arr,T[] temp,int left,int right) 
    {
        if(right-left<=check_threshold) 
        {
            return;
        } 
        else 
        {
            int mid=(left+right)/2;
            mergeSort(arr,temp,left,mid);
            mergeSort(arr,temp,mid+1,right);
            merge(arr,temp,left,mid,right);
        }
    }

    private static <T extends Comparable<T>> void merge(T[] arr, T[] temp, int left, int mid, int right) 
    {
        int leftLen=mid-left+1;
        int rightLen=right-mid;

        T[] leftArr=Arrays.copyOfRange(arr,left,left+leftLen);
        T[] rightArr=Arrays.copyOfRange(arr,mid+1,mid+1+rightLen);

        int i=0,j=0,k=left;

        while(i<leftLen && j<rightLen) 
        {
            if(leftArr[i].compareTo(rightArr[j])<=0) 
            {
                arr[k++]=leftArr[i++];
            } 
            else 
            {
                arr[k++]=rightArr[j++];
            }
        }

        while(i<leftLen) 
        {
            arr[k++]=leftArr[i++];
        }

        while(j<rightLen) 
        {
            arr[k++]=rightArr[j++];
        }
    }

    public static void main(String[] args) 
    {
        Integer[] intArr = {  
                            -1805979, -106292, -8848285, 13776841, 6991862, -8020665, -7971545, -979635, 1501235, -9003346,
                            9875679, -7754494, -730102, 4842153, 6877203, -3446070, -2123651, 8126834, 2138824, 2941366,
                            -5633840, -3822578, 8634581, 5703657, -8473801, -6948967, -6080507, 9771181, 6158582, -2834970,
                            3500313, -7278733, 2954055, -8650529, 7098614, -2838947, 2485546, 1971563, 688599, -4208812,
                            -2483647, -3962654, 3611463, 8539673, -4816062, 3448609, 6183110, 5177286, -1965147, 3526343,
                            -9280664, 5781882, -5248314, 761072, -1770735, 3365904, 8509556, 234447, 3297783, -1124283,
                            -7306337, -1947104, -7644239, -6945990, -8681040, -1901707, -2085140, -7587724, 4265726, -8219485,
                            -4617483, 4826887, -7270778, 5516365, 6531304, -7826062, 5704669, 798174, -950010, 571368, -8609648,
                            -2760259, 4182615, 651246, -6430414, -1065916, 1072607, -9556415, -9178261, -6580872, -8151957,
                            -8493989, -5816452, -4537503, 9813484, 4489381, -4566685, -3637661, 870355, -6431009, -2386807,
                            3392426, -5237460, 6708365, -3344948, 1514152, 7499752, -7044264, 3323446, -4481863, -1454237,
                            -8575726, 6633871, -4251296, 1200485, 9033718, -7887343, -7350522, -1520704, 7282920, 4671221,
                            -2238524, -3805900, 5445689, -2160940, -1577076, -3922849, -9256729, -2187226, -9449866, -5805881,
                            -2188463, -8299910, -3948527, 7083473, -8665280, -8021423, -397251, 8930190, -3677612, -435651,
                            -4173079, 2616990, -7407258, -5157247, -5530469, -3024272, 3762673, 1185260, 4629344, 8294301,
                            -6020079, 5386164, -7270349, -4324082, 758311, -8943187, 1461052, 3056780, -7498882, 4290706,
                            -9589832, -1091198, 8163042, 1256572, -7990761, -391439, -6744550, -9289367, 8459733, -2464489,
                            5326834, 9275444, 2378746, -7113258, -2090623, 4928727, 3870820, -3247104, -4982307, 9439059,
                            -5767551, 4290508, 2897757, 6285103, 2311316, -8768891, -8024080, -4987904, -7278350, -6757592,
                            -9325477, 9636390, -1858510, -1002004, -5720798, 1082598, -6731075, -3443631, 2902376, -738284,
                            -8656178, 8190125, -893211, 8521548, 3000765, -9552002, -2907305, -2402151, 3924481, -3432311,
                            -3806028, -8630266, 9847526, 322942, -1599366, -3078686, -1614069, -3169108, -6588535, -1235366,
                            710841, 8677657, 3560714, -8360273, -5926683, -929635, 1705751, -8027443, -8005025, 2709145,
                            -7881575, -8395026, 3808553, 2684117, 1664634, -6528389, -3901900, 7873379, -7207556, 7221027,
                            -8376797, -7785415, -7435569, 6370792, -3511638, -4951207, 9642597, 1389833, -663098, 9934187,
                            1503194, -2183602, -5828559, -6380988, 5061409, -7592841, -5217269, -6118628, -794753, 9840031,
                            2926258, -293040, -3923036, -5718728, 7042726, 9629696, 9160241, -2191, 8918715, 3919288, 7200293,
                            9660041, -5413422, -5102202, 3104810
                        };
        long startTime=System.nanoTime();
        JaiSort(intArr);
        long endTime=System.nanoTime();
        double elapsedTimeInSeconds=(endTime-startTime)/1e9;
        System.out.println("Sorted Integer Array: \n\n"+Arrays.toString(intArr)+"\n\n");
        System.out.println("\nTime elapsed: " + elapsedTimeInSeconds + " seconds\n\n");

        Long[] longArr = { 
                        -8715029512491L,4295678364718L,-7023817593675L,6819430580291L,-3187249864157L,9358257741536L,
                        -6689117368521L,5236841927846L,-9365916504725L,2746081395279L,-1835908719450L,8621557273899L,
                        -7402886628154L,9386150479375L,-1228774904095L,5668743920707L,-3196745079924L,7253601382663L,
                        -5384179268393L,4901159658842L,-2755970792435L,6249560221934L,-6942656332283L,1297827638491L,
                        -8638964877028L,6752403849101L,-7469162949076L,1587472198883L,-7058306520452L,9842107192101L,
                        -4871573519570L,3581459825579L,-9199659788011L,7818693015905L,-5940251783718L,4203302819869L,
                        -3360746027506L,7189424690064L,-5539818900672L,5772669643510L,-8733957947971L,6987681007840L,
                        -5038877369069L,8168722491788L,-1851746390239L,5272662519420L,-3495248414472L,7314762824287L,
                        -9865215258288L,5432403878827L,-6773359986847L,2519813705585L,-3746808501379L,6916352012498L,
                        -5397125380675L,9851729295510L,-8531202653846L,6692179134306L,-2785475506388L,8182341597015L,
                        -9077842432879L,5269826207134L,-7493617434321L,1362146891392L,-6255907516656L,7037927139779L,
                        -4133364098623L,4872383153763L,-8026673870049L,5604877518878L,-9320745503561L,3248301938795L,
                        -2019677869577L,7627502040431L,-8937275879949L,5721367747254L,-6254873108287L,9369255973094L,
                        -7753299578728L,2532074985965L,-6212498797811L,7356884859045L,-5187325401978L,6284875811090L,
                        -2906818349226L,4796295329820L,-8455709245397L,6943098820269L,-9998724608319L,5369627822647L,
                        -7196208739063L,8480571295934L,-9369813753190L,6852491048652L,-5245967164331L,3184567519972L,
                        -7818492225082L,5435252704069L,-3849721644865L,7319182377186L,-6029865973387L,5178325257086L,
                        -2075757704529L,7999603351678L,-8984689697451L,6283688973873L,-7347195228957L,1457192119356L,
                        -5583157828789L,7359180876287L,-4608784396570L,4844866808998L,-8302909196985L,6721745398339L,
                        -5992144656697L,9349553668992L,-8108323131242L,5866675423527L,-3210867199361L,7780123458203L,
                        -7441907581021L,3268957014843L,-5777258399817L,5679057105936L,-9157049842379L,7318893490872L,
                        -6929031287850L,5721672089457L,-4886789932215L,9465148139010L,-7704260247764L,4377840921628L,
                        -6324659987942L,8117963604897L,-9627394465862L,6874305476329L,-7506308030307L,3437922619543L,
                        -5786929512029L,8595471351989L,-7258371769970L,5139053818063L,-3166415806512L,7982988886259L,
                        -5411729311473L,6604817042310L,-8797028158443L,7126288594387L,-2485836013649L,5217002645896L,
                        -3968879003477L,7909871417319L,-6595655183692L,5627714568529L,-4346183220239L,8450328624171L,
                        -9034307117507L,6692518222528L,-7425656988744L,3774967089817L,-5729330865427L,5275981853210L,
                        -3393286969579L,7719043442586L,-5629982451694L
                        };
        long startTime2=System.nanoTime();
        JaiSort(longArr);
        long endTime2=System.nanoTime();
        double elapsedTimeInSeconds2=(endTime2-startTime2)/1e9;
        System.out.println("Sorted Long Array: \n\n"+Arrays.toString(longArr));
        System.out.println("\nTime elapsed: "+elapsedTimeInSeconds2+" seconds\n\n");
    }
}


